/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package banksimulator.view;

import banksimulator.SimulationConfig;
import banksimulator.view.windowsinterfaces.SimulationSettingsDialogInterface;
import javax.swing.JLabel;

/**
 *
 * @author scavenger
 */
public class SimulationSettingsDialog extends javax.swing.JDialog {
    private SimulationConfig m_currentConfig = null;
    /**
     * Creates new form SimulationSettingsDialog
     */
    private SimulationSettingsDialogInterface m_listener = null;
    
    public SimulationSettingsDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        //jLabel3.setText("<html>Número de operações: <br>EXCESSÃO DA CRIAÇÃO DE CONTA E DEPÓSITO INICIAL</br></html>");
    }
    
    public SimulationSettingsDialog(java.awt.Frame parent, 
            boolean modal, SimulationConfig config) {
        super(parent, modal);
        initComponents();
        m_currentConfig = config;
        settingValues();
    }
    
    public void setListener(SimulationSettingsDialogInterface listener){
        m_listener = listener;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        m_spinnerThreadPool = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        m_spinnerAgentsNumber = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        m_spinnerOperationNumber = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        m_spinnerDraftMaxValue = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        m_spinnerDepositMaxValue = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        m_spinnerThridDepositValue = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        m_spinnerMaxTransferValue = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        m_spinnerSleepTime = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        m_spinnerFoundsFail = new javax.swing.JSpinner();
        m_spinnerDepositRange = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        m_buttonCancel = new javax.swing.JButton();
        m_buttonConfirm = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Simulação"));

        jLabel1.setText("Thread Pool: ");

        m_spinnerThreadPool.setModel(new javax.swing.SpinnerNumberModel(300, 1, null, 1));
        m_spinnerThreadPool.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_spinnerThreadPoolKeyTyped(evt);
            }
        });

        jLabel2.setText("Número de Agentes: ");

        m_spinnerAgentsNumber.setModel(new javax.swing.SpinnerNumberModel(300, 2, null, 1));
        m_spinnerAgentsNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_spinnerAgentsNumberKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m_spinnerThreadPool, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m_spinnerAgentsNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {m_spinnerAgentsNumber, m_spinnerThreadPool});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(m_spinnerThreadPool, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(m_spinnerAgentsNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {m_spinnerAgentsNumber, m_spinnerThreadPool});

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Agentes"));

        jLabel3.setText("Número operações: ");

        m_spinnerOperationNumber.setModel(new javax.swing.SpinnerNumberModel(30, 1, 1000000, 1));
        m_spinnerOperationNumber.setToolTipText("");
        m_spinnerOperationNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_spinnerOperationNumberKeyTyped(evt);
            }
        });

        jLabel4.setText("Valor saque máximo: ");

        m_spinnerDraftMaxValue.setModel(new javax.swing.SpinnerNumberModel(2000, 2, 5000, 1));
        m_spinnerDraftMaxValue.setToolTipText("Valormáximo a ser sacado. Min: 1, Máx: 5000");
        m_spinnerDraftMaxValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_spinnerDraftMaxValueKeyTyped(evt);
            }
        });

        jLabel5.setText("Depósito pŕoprio máximo: ");

        m_spinnerDepositMaxValue.setModel(new javax.swing.SpinnerNumberModel(2000, 100, null, 1));
        m_spinnerDepositMaxValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_spinnerDepositMaxValueKeyTyped(evt);
            }
        });

        jLabel6.setText("Depósito terceiros máximo:");

        m_spinnerThridDepositValue.setModel(new javax.swing.SpinnerNumberModel(1000, 2, null, 1));
        m_spinnerThridDepositValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_spinnerThridDepositValueKeyTyped(evt);
            }
        });

        jLabel7.setText("Transferência máxima: ");

        m_spinnerMaxTransferValue.setModel(new javax.swing.SpinnerNumberModel(1500, 100, null, 1));
        m_spinnerMaxTransferValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_spinnerMaxTransferValueKeyTyped(evt);
            }
        });

        jLabel8.setText("Sleep Time (ms): ");

        m_spinnerSleepTime.setModel(new javax.swing.SpinnerNumberModel(1L, 0L, null, 1L));
        m_spinnerSleepTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_spinnerSleepTimeKeyTyped(evt);
            }
        });

        jLabel9.setText("Limite de falha de fundos: ");

        jLabel10.setText("Tolerancia de depósito próprio: ");

        m_spinnerFoundsFail.setModel(new javax.swing.SpinnerNumberModel(3, 2, null, 1));
        m_spinnerFoundsFail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_spinnerFoundsFailKeyTyped(evt);
            }
        });

        m_spinnerDepositRange.setModel(new javax.swing.SpinnerNumberModel(3, 2, null, 1));
        m_spinnerDepositRange.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_spinnerDepositRangeKeyTyped(evt);
            }
        });

        jLabel11.setText("EXCETO CRIAÇÃO DE CONTA & PRIMEIRO DEPÓSITO");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m_spinnerOperationNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m_spinnerDraftMaxValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m_spinnerDepositMaxValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m_spinnerThridDepositValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m_spinnerMaxTransferValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m_spinnerSleepTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(m_spinnerFoundsFail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(m_spinnerDepositRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel10, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7, jLabel8, jLabel9});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {m_spinnerDepositMaxValue, m_spinnerDepositRange, m_spinnerDraftMaxValue, m_spinnerFoundsFail, m_spinnerMaxTransferValue, m_spinnerOperationNumber, m_spinnerSleepTime, m_spinnerThridDepositValue});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m_spinnerOperationNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(m_spinnerDraftMaxValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(m_spinnerDepositMaxValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(m_spinnerThridDepositValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(m_spinnerMaxTransferValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(m_spinnerSleepTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(m_spinnerFoundsFail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(m_spinnerDepositRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel10, jLabel4, jLabel5, jLabel6, jLabel7, jLabel8, jLabel9});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {m_spinnerDepositMaxValue, m_spinnerDepositRange, m_spinnerDraftMaxValue, m_spinnerFoundsFail, m_spinnerMaxTransferValue, m_spinnerOperationNumber, m_spinnerSleepTime, m_spinnerThridDepositValue});

        m_buttonCancel.setText("Cancelar");
        m_buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_buttonCancelActionPerformed(evt);
            }
        });

        m_buttonConfirm.setText("Confimar");
        m_buttonConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_buttonConfirmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(m_buttonConfirm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(m_buttonCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(m_buttonCancel)
                    .addComponent(m_buttonConfirm))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void m_spinnerThreadPoolKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_spinnerThreadPoolKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c))
            evt.consume();
    }//GEN-LAST:event_m_spinnerThreadPoolKeyTyped

    private void m_spinnerAgentsNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_spinnerAgentsNumberKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c))
            evt.consume();
    }//GEN-LAST:event_m_spinnerAgentsNumberKeyTyped

    private void m_spinnerOperationNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_spinnerOperationNumberKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c))
            evt.consume();
    }//GEN-LAST:event_m_spinnerOperationNumberKeyTyped

    private void m_spinnerDraftMaxValueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_spinnerDraftMaxValueKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c))
            evt.consume();
    }//GEN-LAST:event_m_spinnerDraftMaxValueKeyTyped

    private void m_spinnerDepositMaxValueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_spinnerDepositMaxValueKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c))
            evt.consume();
    }//GEN-LAST:event_m_spinnerDepositMaxValueKeyTyped

    private void m_spinnerThridDepositValueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_spinnerThridDepositValueKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c))
            evt.consume();
    }//GEN-LAST:event_m_spinnerThridDepositValueKeyTyped

    private void m_spinnerMaxTransferValueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_spinnerMaxTransferValueKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c))
            evt.consume();
    }//GEN-LAST:event_m_spinnerMaxTransferValueKeyTyped

    private void m_spinnerSleepTimeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_spinnerSleepTimeKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c))
            evt.consume();
    }//GEN-LAST:event_m_spinnerSleepTimeKeyTyped

    private void m_spinnerFoundsFailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_spinnerFoundsFailKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c))
            evt.consume();
    }//GEN-LAST:event_m_spinnerFoundsFailKeyTyped

    private void m_spinnerDepositRangeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_spinnerDepositRangeKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c))
            evt.consume();
    }//GEN-LAST:event_m_spinnerDepositRangeKeyTyped

    private void m_buttonConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_buttonConfirmActionPerformed
        // TODO add your handling code here:
        /*Gerar o objeto SImulatorSettings*/
        SimulationConfig settings = generate();
        if (m_listener!= null )
            m_listener.onConfirm(settings);
        
        this.dispose();
    }//GEN-LAST:event_m_buttonConfirmActionPerformed

    private void m_buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_buttonCancelActionPerformed
        if (m_listener!= null)
            m_listener.onCancel(m_currentConfig);
        
        
        this.dispose();
    }//GEN-LAST:event_m_buttonCancelActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimulationSettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimulationSettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimulationSettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulationSettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SimulationSettingsDialog dialog = new SimulationSettingsDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton m_buttonCancel;
    private javax.swing.JButton m_buttonConfirm;
    private javax.swing.JSpinner m_spinnerAgentsNumber;
    private javax.swing.JSpinner m_spinnerDepositMaxValue;
    private javax.swing.JSpinner m_spinnerDepositRange;
    private javax.swing.JSpinner m_spinnerDraftMaxValue;
    private javax.swing.JSpinner m_spinnerFoundsFail;
    private javax.swing.JSpinner m_spinnerMaxTransferValue;
    private javax.swing.JSpinner m_spinnerOperationNumber;
    private javax.swing.JSpinner m_spinnerSleepTime;
    private javax.swing.JSpinner m_spinnerThreadPool;
    private javax.swing.JSpinner m_spinnerThridDepositValue;
    // End of variables declaration//GEN-END:variables

    
    public void settingValues(){
        if (m_currentConfig!= null){
            m_spinnerAgentsNumber.setValue( new Integer( m_currentConfig.m_agentSize).intValue());
            m_spinnerDraftMaxValue.setValue(new Integer( m_currentConfig.m_agentConfig.m_maxDraftValue).intValue());
            m_spinnerFoundsFail.setValue(new Integer(
                    m_currentConfig.m_agentConfig.m_foundsFaultLimit
            ).intValue());
            
            m_spinnerMaxTransferValue.setValue( 
                    new Integer( m_currentConfig.m_agentConfig.m_maxTransferValue).intValue());
            m_spinnerOperationNumber.setValue(new Long( m_currentConfig.m_agentConfig.m_operationsNumber).intValue());
            m_spinnerSleepTime.setValue(new Long(m_currentConfig.m_agentConfig.m_sleepTime).longValue());
            m_spinnerThreadPool.setValue(new Integer(m_currentConfig.m_poolSize).intValue());
            
            m_spinnerThridDepositValue.setValue(new Integer(m_currentConfig.m_agentConfig.m_maxDepositValue).intValue());
            m_spinnerDepositMaxValue.setValue(new Integer( m_currentConfig.m_agentConfig.m_selfDepositValueLimit).intValue());
        }
    }
    
    private SimulationConfig generate(){
        SimulationConfig settings = new SimulationConfig();
        
        settings.m_poolSize = ((Integer) m_spinnerThreadPool.getValue());
        settings.m_agentSize = ((Integer) m_spinnerAgentsNumber.getValue());
        
        settings.m_agentConfig.m_operationsNumber = ((Integer)m_spinnerOperationNumber.getValue()).intValue();
        settings.m_agentConfig.m_foundsFaultLimit = ((Integer)m_spinnerFoundsFail.getValue()).intValue();
        settings.m_agentConfig.m_maxDepositValue = ((Integer)m_spinnerThridDepositValue.getValue()).intValue();
        settings.m_agentConfig.m_maxDraftValue = ((Integer)m_spinnerDraftMaxValue.getValue()).intValue();
        settings.m_agentConfig.m_maxTransferValue = ((Integer)m_spinnerMaxTransferValue.getValue()).intValue();
        settings.m_agentConfig.m_selfDepositNumberLimit = ((Integer)m_spinnerDepositRange.getValue()).intValue();
        settings.m_agentConfig.m_selfDepositValueLimit = ((Integer)m_spinnerDepositMaxValue.getValue()).intValue();
        
        /*HA AS VEZES UM ERRO DE CAST AQUI!*/
        settings.m_agentConfig.m_sleepTime = (long)((Long)m_spinnerSleepTime.getValue()).intValue();
        System.out.println("O VALOR EM MS: " );

        return settings;
    }
    
}
